
globals:
  # External secrets are used to inject secrets from external secret managers
  externalSecrets:
    # -- Secret store installed in the cluster
    secretStore: fake
    # -- Secrets refresh interval
    refreshInterval: 15m
    # -- Each field represent the name of the secret in the remote secret manager
    # @default -- Map of fields
    refs:
      terraform_sp: &azure-adls-terraform-sp azure-adls-terraform-sp


adls-gen2:
  # -- Include the TF module to create the Storage Account
  enabled: true

  fullnameOverride: &adls-module "adls-gen2"

  # -- Terraform Remote State configuration
  state:
    # -- The Name of the Resource Group in which the Storage Account exists
    resource_group_name: ""
    # -- The Name of the Storage Account
    storage_account_name: ""
    # -- The Name of the Storage Container within the Storage Account
    container_name: ""


terraform-specific-provisioner:
  # -- Switch to enable or disable the Terraform specific provisioner helm chart
  enabled: true

  # -- Docker Registry Secret name used to access a private repo
  dockerRegistrySecretName: regcred

  image:
    # -- Image repository
    registry: registry.gitlab.com/agilefactory/witboost.mesh/provisioning/terraform/witboost.mesh.provisioning.terraform.specificprovisioner
    # -- Image tag
    tag: to-be-replaced
    # -- The imagePullPolicy for a container and the tag of the image affect when the kubelet attempts to pull (download) the specified image.
    pullPolicy: Always

  # -- define extra variables to add to the container(s)
  # e.g:
  # extraEnvVars:
  #  - name: FOO
  #     value: "10"
  extraEnvVars:
    - name: ARM_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: *azure-adls-terraform-sp
          key: ARM_CLIENT_ID
    - name: ARM_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: *azure-adls-terraform-sp
          key: ARM_CLIENT_SECRET
    - name: ARM_SUBSCRIPTION_ID
      valueFrom:
        secretKeyRef:
          name: *azure-adls-terraform-sp
          key: ARM_SUBSCRIPTION_ID
    - name: ARM_TENANT_ID
      valueFrom:
        secretKeyRef:
          name: *azure-adls-terraform-sp
          key: ARM_TENANT_ID
    - name: PRINCIPAL_MAPPING_TENANT_ID
      valueFrom:
        secretKeyRef:
          name: *azure-adls-terraform-sp
          key: PRINCIPAL_MAPPING_TENANT_ID
    - name: PRINCIPAL_MAPPING_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: *azure-adls-terraform-sp
          key: PRINCIPAL_MAPPING_CLIENT_ID
    - name: PRINCIPAL_MAPPING_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: *azure-adls-terraform-sp
          key: PRINCIPAL_MAPPING_CLIENT_SECRET

  # -- define extra volumes
  extraVolumes:
    - name: *adls-module
      configMap:
        name: *adls-module
        defaultMode: 420

  # -- define extra volume mounts
  extraVolumeMounts:
    - name: *adls-module
      mountPath: /tf/adls-gen2

  # -- readiness probe spec
  readinessProbe: {}

  # -- liveness probe spec
  livenessProbe: {}

  # -- security context spec
  securityContext:
    runAsUser: 65535
    allowPrivilegeEscalation: false
    runAsNonRoot: true

  # -- serviceAccount
  serviceAccountName:

  # -- resources spec
  resources: {}

  # -- Allows you to specify common labels
  labels: {}

  # -- This configuration allows you to override the application.conf file
  configOverride: |
    datameshProvisioner {
      networking {
        httpServer {
          port: 8083
          interface: "0.0.0.0"
        }
      }
      terraform {
        "urn:dmb:utm:azure-storage-adlsgen2-template:0.0.0" {
          repositoryPath: "/tf/adls-gen2"
          descriptorToVariablesMapping: {
            dp_domain = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.component.dpDomain"
            dp_name_major_version = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.component.dpNameMajorVersion"
            component_name = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.component.name"
            resource_group = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.resourceGroup"
            storage_account_name = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.storageAccount"
            account_tier = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.performance"
            account_replication_type = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.redundancy"
            access_tier = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.accessTier"
            infrastructure_encryption_enabled = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.infrastructureEncryptionEnabled"
            allow_nested_items_to_be_public = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.allowNestedItemsToBePublic"
            containers = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.containers"
          }
          principalMappingPlugin {
               pluginClass: "it.agilelab.plugin.principalsmapping.impl.azure.AzureMapperFactory"
               azure: {
                  tenantId: ${?PRINCIPAL_MAPPING_TENANT_ID}
                  clientId: ${?PRINCIPAL_MAPPING_CLIENT_ID}
                  clientSecret: ${?PRINCIPAL_MAPPING_CLIENT_SECRET}
               }
          }
          backendConfigs: {
            stateKey = "key"
            configs = {
              key = "$.dataProduct.components[?(@.id == '{{componentIdToProvision}}')].specific.state.key"
            }
          }
        }
      }
    }

  # -- This configuration allows you to override the logback.xml file
  logbackOverride: {}
